/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.92
 * Generated at: 2019-04-10 15:49:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class waybill_002dprint_002dcontent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>打印面单</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/jquery.qrcode.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("\t.content>div{\r\n");
      out.write("\t\tmargin:10px;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.content{\r\n");
      out.write("\t\tmargin:10px;\r\n");
      out.write("\t\twidth:400px;\r\n");
      out.write("\t\tmargin: 0 auto;\r\n");
      out.write("\t}\r\n");
      out.write("\t.main{\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<style  media=\"print\" type=\"text/css\">\r\n");
      out.write("\t.noprint{\r\n");
      out.write("\t\tvisibility:hidden\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"main\">\r\n");
      out.write("\r\n");
      out.write("\t<div class = \"content\">\r\n");
      out.write("\t\t<div class = \"region\">\r\n");
      out.write("\t\t\t");
 /* = new String(request.getParameter("desmergername").getBytes("ISO-8859-1"),"UTF-8") */
      out.write("\r\n");
      out.write("\t\t\t");
      out.print( request.getAttribute("desmergername") );
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class = \"code\">\r\n");
      out.write("\t\t\t<div class = \"qrcode\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class = \"id\">\r\n");
      out.write("\t\t\t");
      out.print( request.getAttribute("waybillid") );
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<button class=\"noprint\" onclick=\"print()\">打印</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("function utf16to8(str) {  \r\n");
      out.write("    var out, i, len, c;  \r\n");
      out.write("    out = \"\";  \r\n");
      out.write("    len = str.length;  \r\n");
      out.write("    for (i = 0; i < len; i++) {  \r\n");
      out.write("        c = str.charCodeAt(i);  \r\n");
      out.write("        if ((c >= 0x0001) && (c <= 0x007F)) {  \r\n");
      out.write("            out += str.charAt(i);  \r\n");
      out.write("        } else if (c > 0x07FF) {  \r\n");
      out.write("            out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));  \r\n");
      out.write("            out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));  \r\n");
      out.write("            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));  \r\n");
      out.write("        } else {  \r\n");
      out.write("            out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));  \r\n");
      out.write("            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));  \r\n");
      out.write("        }  \r\n");
      out.write("    }  \r\n");
      out.write("    return out;  \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\tvar str = '");
      out.print(request.getAttribute("qrcode"));
      out.write("';\r\n");
      out.write("\t$('.qrcode').qrcode(utf16to8(str));\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
